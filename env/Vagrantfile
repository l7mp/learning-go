Vagrant.configure("2") do |config|
  config.vm.box = "bento/ubuntu-22.04"
  config.vm.hostname = "CloudNativeGo"
  #config.vm.synced_folder ".", "/host"

  config.vm.provider "virtualbox" do |vb|
    vb.name = "CloudNativeGo"
    vb.gui = true
    vb.memory = "6144"
    vb.cpus = "3"

    vb.customize ['modifyvm', :id, '--clipboard-mode', 'bidirectional']
    vb.customize ['modifyvm', :id, '--draganddrop', 'bidirectional']
  end

  config.vm.provision "deps", type: "shell", privileged: false, inline: <<-SHELL
    sudo sed -i "s@http://us.archive.ubuntu.com@http://hu.archive.ubuntu.com@g" /etc/apt/sources.list
    sudo DEBIAN_FRONTEND=noninteractive apt-get update
    sudo DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -yq
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq \
         bash-completion \
         build-essential \
         tcpdump \
         git \
         curl \
         jq \
         podman \
         podman-docker
    sudo DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -yq \
         ubuntu-desktop \
         yaru-theme-gtk \
         fonts-ubuntu \
         fonts-ubuntu-console \
         fonts-noto-color-emoji \
         firefox

    export CNI_PLUGIN_DEB="containernetworking-plugins_1.1.1+ds1-3ubuntu0.24.04.3_amd64.deb"
    wget http://hu.archive.ubuntu.com/ubuntu/pool/universe/g/golang-github-containernetworking-plugins/$CNI_PLUGIN_DEB
    sudo dpkg -i $CNI_PLUGIN_DEB
    rm $CNI_PLUGIN_DEB
  SHELL

  config.vm.provision "clean", type: "shell", privileged: false, inline: <<-SHELL
    sudo DEBIAN_FRONTEND=noninteractive apt-get autoremove -yq
    sudo DEBIAN_FRONTEND=noninteractive apt-get clean all
  SHELL

  config.vm.provision "go-install", type: "shell", privileged: false, inline: <<-SHELL
    #export GO_TAR="$(curl -s https://go.dev/VERSION?m=text | head -n 1).linux-amd64.tar.gz"
    export GO_TAR="go1.24.6.linux-amd64.tar.gz"
    wget "https://go.dev/dl/$GO_TAR"
    sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf $GO_TAR
    echo "export PATH=$PATH:/usr/local/go/bin" | sudo tee /etc/profile
    rm -rf $GO_TAR
  SHELL

  config.vm.provision "kubectl-install", type: "shell", privileged: false, inline: <<-SHELL
    export KUBEVERSION="1.30"
    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v$KUBEVERSION/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list
    curl -fsSL "https://pkgs.k8s.io/core:/stable:/v$KUBEVERSION/deb/Release.key" | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    sudo DEBIAN_FRONTEND=noninteractive apt-get update
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y kubectl
    echo "source <(kubectl completion bash)" >> ~/.bashrc
  SHELL

  config.vm.provision "helm-install", type: "shell", privileged: false, inline: <<-SHELL
    curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
    sudo DEBIAN_FRONTEND=noninteractive apt-get install apt-transport-https --yes
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
    sudo DEBIAN_FRONTEND=noninteractive apt-get update
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y helm
    echo "source <(helm completion bash)" >> ~/.bashrc
  SHELL

  config.vm.provision "vscode-install", type: "shell", privileged: false, inline: <<-SHELL
    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
    sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
    sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
    rm -f packages.microsoft.gpg
    sudo DEBIAN_FRONTEND=noninteractive apt-get update
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y code
    code --install-extension golang.go redhat.vscode-yaml

    go install github.com/go-delve/delve/cmd/dlv@latest
    go install honnef.co/go/tools/cmd/staticcheck@latest
    go install golang.org/x/tools/gopls@latest
  SHELL

  config.vm.provision "minikube-install", type: "shell", privileged: false, inline: <<-SHELL
    # curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    curl -LO https://github.com/kubernetes/minikube/releases/download/v1.33.1/minikube-linux-amd64
    sudo install minikube-linux-amd64 /usr/local/bin/minikube
    rm minikube-linux-amd64
    echo "source <(minikube completion bash)" >> ~/.bashrc
    minikube config set WantUpdateNotification false
    minikube start --driver=podman --container-runtime=cri-o --delete-on-failure --wait-timeout 180s
    minikube stop
    minikube delete --all
  SHELL

  config.vm.provision "final-touches", type: "shell", privileged: false, inline: <<-SHELL
    sudo touch /etc/containers/nodocker
    echo 'unqualified-search-registries = ["docker.io"]' | sudo tee -a /etc/containers/registries.conf
    gsettings set org.gnome.shell favorite-apps "['firefox_firefox.desktop', 'org.gnome.Nautilus.desktop', 'org.gnome.Terminal.desktop', 'code.desktop']"
    gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'us'), ('xkb', 'hu')]"

    gsettings set org.gnome.desktop.screensaver idle-activation-enabled false
    gsettings set org.gnome.desktop.screensaver lock-enabled false
    gsettings set org.gnome.desktop.lockdown disable-lock-screen 'true'
  SHELL

  config.vm.provision "reboot", type: "shell" do |shell|
      shell.privileged = true
      shell.inline = 'echo rebooting'
      shell.reboot = true
  end

end
